@{
    Layout = "~/Views/Shared/_LayoutAce.cshtml";
}
@section Styles{
    <link rel="stylesheet" href="/assets/css/dropzone.css" />
    <link href="~/assets/css/sweetalert.css" rel="stylesheet" />
}

<div ng-controller="uploaderController as upload">

    <div>
        <div class="widget-toolbar" no-border>
            <a id="addBtn" ng-click="upload.open()" data-target="#myModalCreate" href="#">
                <i class="upload-icon ace-icon fa fa-cloud-upload blue fa-3x"></i>
            </a>
        </div>
    </div>

    <!---/modal--->

    <div class="container col-lg-12"></div>
    <div id="feed" class="tab-pane active">
        <div class="profile-feed row">
            <div class="col-sm-4" ng-repeat="file in upload.files">
                <div class="profile-activity clearfix">
                    <div>

                        <i class="fa blue fa-3x" ng-class="{'fa-file-image-o':upload.setIcon(file.friendlyName||file.name),'fa-file-o':true}"></i>

                        <a class="user" href="#"> {{file.friendlyName}} </a>
                        
                        

                        @*<div class="time">
                            <i class="ace-icon fa fa-clock-o bigger-110"></i>
                            an hour ago
                        </div>*@
                    </div>

                    <div class="tools action-buttons">
                        

                        <a href="#" class="red">
                            <i class="ace-icon fa fa-times bigger-125" ng-click="upload.sweetConfirm(file.id);"></i>
                        </a>
                    </div>
                </div>


            </div><!-- /.col -->


        </div><!-- /.row -->

        <div class="space-12"></div>

        <div class="center">
            <button type="button" class="btn btn-sm btn-primary btn-white btn-round">
                <i class="ace-icon fa fa-rss bigger-150 middle orange2"></i>
                <span class="bigger-110">View more activities</span>
                <i class="icon-on-right ace-icon fa fa-arrow-right"></i>
            </button>
        </div>
    </div><!-- /#feed -->

</div><!---Main Controller-->

<script type="text/ng-template" id="myModalContent.html">

    <div class="modal-header">
        <h3 class="modal-title">I'm a modal!</h3>
    </div>
    <div class="modal-body">

        <form class="dropzone"
              method="post"
              enctype="multipart/form-data"
              ng-dropzone
              dropzone="mIns.dropzone"
              dropzone-config="mIns.dropzoneConfig"
              event-handlers="{ 'addedfile': mIns.dzAddedFile, 'error': mIns.dzError, 'success': mIns.dzSuccess }"></form>

    </div>
    <div class="modal-footer">
        <button class="btn btn-default" type="button" ng-click="mIns.ok()">Submit</button>
        <button class="btn btn-warning" type="button" ng-click="mIns.cancel()">Cancel</button>
    </div>
</script><!--Modal DropZone-->

<div id="preview-template" class="hide">
    <div class="dz-preview dz-file-preview">
        <div class="dz-image">
            <img data-dz-thumbnail="" />
        </div>

        <div class="dz-details">
            <div class="dz-size">
                <span data-dz-size=""></span>
            </div>

            <div class="dz-filename">
                <span data-dz-name=""></span>
            </div>
        </div>

        <div class="dz-progress">
            <span class="dz-upload" data-dz-uploadprogress=""></span>
        </div>

        <div class="dz-error-message">
            <span data-dz-errormessage=""></span>
        </div>

        <div class="dz-success-mark">
            <span class="fa-stack fa-lg bigger-150">
                <i class="fa fa-circle fa-stack-2x white"></i>

                <i class="fa fa-check fa-stack-1x fa-inverse green"></i>
            </span>
        </div>

        <div class="dz-error-mark">
            <span class="fa-stack fa-lg bigger-150">
                <i class="fa fa-circle fa-stack-2x white"></i>

                <i class="fa fa-remove fa-stack-1x fa-inverse red"></i>
            </span>
        </div>
    </div>
</div><!--template for dropZone-->



<div class="hr hr-double hr8"></div>


@section pageinitScripts{
    <script src="~/Scripts/sabio/sabio.module.paging.js"></script>
    <script type="text/javascript" src="~/assets/js/dropzone.js"></script>
    <script src="~/Scripts/sabio/sabio.module.ngDropZone.js"></script>
    <script src="~/Scripts/bower_components/ngDropZone.js"></script>
    <script src="~/Scripts/sweetalert-dev.js"></script>
}


@section scripts
{
    <script src="~/Scripts/paging.js"></script>
    <script src="~/Scripts/sabio/services/sabio.services.files.js"></script>
    <script type="text/javascript">

        //File Services Factory
        (function () {
            "use strict";

            angular.module(APPNAME)
                 .factory('$filesService', filesServiceFactory);

            filesServiceFactory.$inject = ['$baseService', '$sabio'];    //  $sabio is a reference to sabio.page object which is created in sabio.js

            function filesServiceFactory($baseService, $sabio) {

                var aSabioServiceObject = sabio.services.files;

                var newService = $baseService.merge(true, {}, aSabioServiceObject, $baseService);

                return newService;
            }

        })();

        //Sweet MF Factory D:<
        (function () {
            "use strict";

            angular.module(APPNAME)
                 .factory('$SweetAlert', SweetAlert);
            SweetAlert.$inject = ['$baseService', '$sabio', '$rootScope'];    //  $sabio is a reference to sabio.page object which is created in sabio.js
            var swal = window.swal;
            function SweetAlert($baseService, $sabio, $rootScope) {
                //public methods
                var self = {

                    swal: function (arg1, arg2, arg3) {
                        $rootScope.$evalAsync(function () {
                            if (typeof (arg2) === 'function') {
                                swal(arg1, function (isConfirm) {
                                    $rootScope.$evalAsync(function () {
                                        arg2(isConfirm);
                                    });
                                }, arg3);
                            } else {
                                swal(arg1, arg2, arg3);
                            }
                        });
                    },
                    success: function (title, message) {
                        $rootScope.$evalAsync(function () {
                            swal(title, message, 'success');
                        });
                    },
                    error: function (title, message) {
                        $rootScope.$evalAsync(function () {
                            swal(title, message, 'error');
                        });
                    },
                    warning: function (title, message) {
                        $rootScope.$evalAsync(function () {
                            swal(title, message, 'warning');
                        });
                    },
                    info: function (title, message) {
                        $rootScope.$evalAsync(function () {
                            swal(title, message, 'info');
                        });
                    }
                };

                return self;

            }

        })();

        //Modal Controller
        (function () {
            "use strict";

            angular.module(APPNAME)
                .controller('uploaderController', UploaderController);

            UploaderController.$inject = ['$scope', '$baseController', '$uibModal', '$log', '$filesService', '$SweetAlert'];

            function UploaderController(
                  $scope
                , $baseController
                , $uibModal
                , $log
                , $filesService
                , $SweetAlert) {


                var mc = this;
                mc.$scope = $scope;
                mc.$filesService = $filesService;
                mc.files = [];
                mc.icon = {};
                mc.message = "Test";
                mc.sweetConfirm = _sweetConfirm;
                mc.delete = _delete;


                mc.notify = mc.$filesService.getNotifier($scope);

                mc.open = _open;
                mc.toggleAnimation = _toggleAnimation;
                mc.animationsEnabled = true;

             //   mc.fireEvent = _fireEvent;

                mc.onGetAllSuccess = _onGetAllSuccess;
                mc.onGetAllError = _onGetAllError;
                mc.onGetSuccess = _onGetSuccess;
                mc.onGetError = _onGetError;
                mc.onDeleteSuccess = _onDeleteSuccess;
                mc.onDeleteError = _onDeleteError;

                mc.setIcon = _setIcon;


                render()

                function render() {

                    mc.$filesService.getAll(mc.onGetAllSuccess, mc.onGetAllError)
                //    mc.fireEvent(3, 'tabChanged')
                    
                }

                function _open(size) {

                    var modalInstance = $uibModal.open({
                        animation: mc.animationsEnabled,
                        templateUrl: 'myModalContent.html',
                        controller: 'modalInstanceCtrl as mIns',
                        size: 'lg',
                        resolve: {
                            items: function () {
                                return mc.items;
                            },
                            success: function () {

                            }
                        }
                    });
                    //pass item to result.then from modal instance
                    modalInstance.result.then(

                        function (d) {

                            mc.files.push(d);

                        }, function () {
                            $log.info('Modal dismissed at: ' + new Date());
                        });
                };

                function _toggleAnimation() {
                    mc.animationsEnabled = !mc.animationsEnabled;
                };

                function _onGetAllSuccess(data) {

                    mc.notify(function () {
                        mc.files = data.items;
                    });
                };

                function _onGetAllError(jqXhr, error) {
                    console.error(error);
                }

                function _setIcon(name) {
                    var fileName = name
                    var fileExt = new RegExp(/\.(jpg|jpeg|png|gif)$/)
                    var iconTest1 = fileExt.test(fileName)
                    return iconTest1;
                }

                function _sweetConfirm(id) {
                    
                    $SweetAlert.swal({
                        title: "Are you sure?",
                        text: "Your will not be able to recover this file!",
                        type: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#DD6B55", confirmButtonText: "Yes, delete it!",
                        cancelButtonText: "No, cancel plx!",
                        closeOnConfirm: false,
                        closeOnCancel: false
                    },
function (isConfirm) {
    if (isConfirm) {
        $SweetAlert.swal("Deleted!", "Your file has been deleted.", "success");
        mc.delete(id);
    } else {
        $SweetAlert.swal("Cancelled", "Your imaginary file is safe :)", "error");
    }
});
                }

                function _delete(id) {
                    mc.$filesService.get(id, mc.onGetSuccess, mc.onGetError);
                    
                    mc.$filesService.delete(id, mc.onDeleteSuccess, mc.onDeleteError);
                    var arrLength = mc.files.length;
                    for (var i = 0; i < arrLength; i++) {
                        if (id == mc.files[i].id) {
                            mc.files.splice(i, 1);
                        }
                    }
                }

                function _onDeleteSuccess(id) {

                    //var arrLength = mc.files.length;
                    //for (var i = 0; i < arrLength; i++) {
                    //    if (id == mc.files[i].id) {
                    //        mc.files.splice(i, 1);
                    //    }
                    //}
                   
                }

                function _onDeleteError(jqXhr, error) {
                    console.error(error);
                }

                function _onGetSuccess(data) {
                    //var fileInfo= data.item
                    //console.log(fileInfo.filePath);
                }

                function _onGetError() {
                    console.log('error');
                }

                //function _fireEvent(idx, eventName) {

                //    mc.$systemEventService.broadcast(eventName, { tabToSelect: idx });
                //}

            };

        })();

        // Please note that $uibModalInstance represents a modal window (instance) dependency.
        // It is not the same as the $uibModal service used above.

        //Modal Instance
        (function () {
            "use strict"
            // angular.module('DemoApp', ['ngDropzone']);

            angular.module(APPNAME)
                .controller('modalInstanceCtrl', ModalInstanceCtrl)

            ModalInstanceCtrl.$inject = ['$scope', '$uibModalInstance', 'items'];

            function ModalInstanceCtrl($scope
                , $uibModalInstance
                , items) {

                var mi = this;
                mi.$scope = $scope;

                mi.message = 'Hi Carlos';
                mi.items = items;

                mi.ok = _ok;
                mi.cancel = _cancel;

                mi.dzSuccess = _dzSuccess;
                mi.dzAddedFile = _dzAddedFile;
                mi.dzError = _dzError;

                mi.dropzoneConfig = {
                    url: '/api/files/2',
                    previewTemplate: angular.element('#preview-template').html(),
                    dictDefaultMessage:
                                '<span class="bigger-150 bolder"><i class="ace-icon fa fa-caret-right red"></i> Drop files</span> to upload \
        		<span class="smaller-80 grey">(or click)</span> <br /> \
        		<i class="upload-icon ace-icon fa fa-cloud-upload blue fa-3x"></i>',
                    parallelUploads: 1000
                };

                function _ok(data) {
                 //   $uibModalInstance.close(data)
                };

                function _cancel() {
                    $uibModalInstance.dismiss('cancel');
                };

                function _dzAddedFile(f) {
                    console.log(f);
                    f.friendlyName = f.name;
                    mi.ok(f);
                };

                function _dzError() {

                };

                function _dzSuccess() {
                    //2
                    
                   // $uibModalInstance.close(data);
                }

            }

        })();

    </script>
}